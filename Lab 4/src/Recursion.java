/**Three recursive problems. * Add your code to the three functions given below. * Do not change any part of the function headers (name, parameters, or return type). * Do not change any part of main. */public class Recursion {	public static void main( String[] args ) {		if( addDigits( 428 ) == 14 ) {			System.out.println( "addDigits1 is correct!" );		}		if( revFibonacci( 0, 1, 1, 5 ) == 5 ) {			System.out.println( "revFib1 is correct!" );		}			if( binToDec( "1101100" ) == 108 ) {			System.out.println( "binToDec1 is correct!" );		}		if( addDigits( 321 ) == 6 ) {			System.out.println( "addDigits2 is correct!" );		}		if( revFibonacci( 0, 1, 1, 10 ) == 55 ) {			System.out.println( "revFib2 is correct!" );		}			if( binToDec( "1011101" ) == 93 ) {			System.out.println( "binToDec2 is correct!" );		}	}	/**Finds the sum of the digits of num	 * @param num value to find the sum of	 * @return the sum of the digits	 */	public static int addDigits( int num ) {		int sum = 0;		//Finds the number the removed number		int remainder = num % 10;		//Adds the removed number to the sum		sum += remainder;		if ( num > 9 ){			//Sends the the number with the last digit removed to addDigits			num = addDigits(num/10);			//Adds the number to the sum			sum += num;			return sum;		}		return sum;	}	/**Finds the nth Fibonacci value	 * @param f1 n-2 Fibonacci value	 * @param f2 n-1 Fibonacci value	 * @param c  counter	 * @param n  the number c should count up to	 * @return  the nth Fibonacci value  	 */	public static int revFibonacci( int f1, int f2, int c, int n ) {		int num = f1 + f2;		if ( c < n-1 ){			//Swaps f1 with f2, f2 with the num, and increases c			num = revFibonacci( f1 = f2, f2 = num, c = c + 1, n);		}		return num;	}	/**Converts a binary string to decimal	 * @param bin the binary string	 * @return the decimal value 	 */	public static int binToDec( String bin ) {		int length = bin.length();		int decimal = 0;		if ( length > 0 ){			//Removes the first digit from the binary number			String binary = bin.substring(1);			//Gets the number value of the string			int digit = Character.getNumericValue(bin.charAt(0));			//Finds the value at each digit depending on if its 1 or 0			if ( digit == 1) {				decimal = 1 * (int) Math.pow(2, length - 1) + binToDec(binary);			}			if ( digit == 0){				decimal = 0 * (int) Math.pow(2, length - 1) + binToDec(binary);			}		}		return decimal;	}}